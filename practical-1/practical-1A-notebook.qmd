---
title: "Practical 1A - R fundamentals"
subtitle: "2024 NUTRIM microbiome & metabolome workshop"
author: YOUR-NAME
date: last-modified
keep-md: false
embed-resources: true
format: html
theme: 
  light: flatly
  dark: darkly
toc: true
---

## Load R packages üì¶

Load all the required R packages.

```{r}

```

## Reading data üìÇ 

Read metadata table from Excel file

```{r}
# give your objects short but informative names!
meta <- 
```

## Inspecting data

### Look at the tables üëÄ

Look at the metadata.

```{r}

```

### Summarise üìã

Check number of participants per diagnosis group.

```{r}
meta %>% count(diagnosis)
```

Check other category counts.

```{r}

```

Compute other summary statistics.

```{r}
meta %>% summarise(age_mean = mean(age_years), age_sd = sd(age_years))
```

Compute grouped summary statistics

```{r}

```

### Visualise üìä

Plot activity level bar chart with base R

```{r}
#| fig-width: 6
#| fig-height: 3
meta$activity %>% table() %>% barplot(xlab = "Disease Activity")
```

Plot age histogram with base R

```{r}
#| fig-width: 6
#| fig-height: 3
meta$age_years %>% hist(breaks = 10, main = NULL, xlab = "Age")
```

ggplot2 is a popular and powerful plotting package.

#### Bar chart

```{r}
#| fig-width: 8
#| fig-height: 3
ggplot(meta) + 
```

#### Histogram

```{r}
#| fig-width: 6
#| fig-height: 3
ggplot(meta) + 
```

## Joining data üüß+Ô∏èüü™

Join the main dataframe `meta` (containing most of the data about each patient) to the other dataframe `meds` (containing medications info for the IBD cases)

```{r}
all_meta <- left_join(meta, meds, by = 
```

Inspect the `all_meta` dataframe with `View(all_meta)`

## Mutating data üß¨? 

Often, you need to modify your variables, or create new ones.

### Modify and assign

1.  Apply a function/transformation to an existing variable (or multiple variables).
2.  Assign the result to a new variable, or overwrite the original variable.

#### Base R ü§ñ

```{r}

```


#### dplyr::mutate üëΩ

```{r}

```

### Temporary or persistent?

We can convert character string variables to factor variables to specify an ordering of their levels (e.g. for plotting).

You can temporarily mutate a dataframe and use the result. This is easy with pipes.

```{r}
#| fig-width: 6
#| fig-height: 3

all_meta %>% 
  mutate(diagnosis = factor(diagnosis, levels = c("CD", "UC", "Other"))) %>% 
  ggplot(aes(diagnosis, age_years)) + geom_boxplot()
```

Notice this did NOT persistently modify the diagnosis variable, it is still "character" class.

```{r}
class(all_meta$diagnosis) # no persistent changes, diagnosis is still character!
```

`mutate` returns a modified dataframe and you must assign this to an object for changes to persist.

```{r}
#| fig-width: 6
#| fig-height: 3
all_meta <- all_meta %>% mutate(diagnosis = factor(diagnosis, c("CD", "UC", "Other")))
all_meta %>% ggplot(aes(diagnosis, age_years)) + geom_boxplot()
```

```{r}
class(all_meta$diagnosis) 
```

### More mutation

We need to clean up the medication history.

```{r}
table(all_meta$medication, useNA = "if")
table(all_meta$immunosuppression_level, useNA = "if")
```

We have NAs for the medication for all the Controls. We know they had "none", so let's first indicate that. We will also replace Controls' immunosuppression_level NA values with "none".

```{r}

```

We now want logical variables indicating if the patient recently had antibiotics (abx), steroids, or other immunosuppressive drugs (imsp).

```{r}

```

For the character variables with more than two values, we can convert them to factors, to encode our preferred ordering of their levels.

```{r}
all_meta <- all_meta %>% mutate(
  

)
```

## Next! ‚è©

-   We have recapped some R fundamentals and introduced the sample metadata.

-   Next we will start working with microbiome data!

## Session info

For reproducibility, it is useful to record the packages and versions used in your analyses. This is easy to do with `sessioninfo::session_info()`.

```{r}
sessioninfo::session_info()
```
